name: Publish to PyPI on release tag

on:
  push:
    tags: ["v*.*.*"]   # semantic version tags: vX.Y.Z

permissions:
  contents: write      # needed by gh-release
  models:   read       # call GitHub Models from Actions

jobs:
  build-and-publish:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write  # OIDC for PyPI Trusted Publishing
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build tooling
        run: python -m pip install --upgrade pip setuptools wheel build twine

      - name: Clean previous builds
        run: rm -rf dist build *.egg-info

      - name: Build sdist & wheel (PEP 517)
        run: python -m build --sdist --wheel

      - name: Verify wheel METADATA
        run: |
          ls -lh dist
          python - <<'PY'
          import glob, zipfile, sys
          ok=True
          for fn in glob.glob('dist/*.whl'):
              with zipfile.ZipFile(fn) as z:
                  metas=[n for n in z.namelist() if n.endswith('.dist-info/METADATA')]
                  print("Wheel:", fn, "METADATA files:", metas)
                  if not metas: ok=False; continue
                  meta=z.read(metas[0]).decode('utf-8','ignore')
                  for k in ("Metadata-Version","Name","Version"):
                      line=next((l for l in meta.splitlines() if l.startswith(k+":")), None)
                      print(line or f"!! Missing {k}"); ok &= bool(line)
          sys.exit(0 if ok else 1)
          PY

      - name: Twine check
        run: python -m twine check dist/*

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

  release:
    needs: build-and-publish
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Generate CHANGELOG with git-cliff
        uses: orhun/git-cliff-action@v4
        id: cliff
        with:
          args: --tag ${{ github.ref_name }}
        env:
          OUTPUT: CHANGELOG.md

      - name: Summarise with GitHub Models (GPT-5, fallback to 4.1)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          CONTENT=$(jq -Rs . < CHANGELOG.md)
          jq -n --argjson content "$CONTENT" '{
            model: "openai/gpt-5",
            messages: [
              { "role": "system", "content": "You are a release-notes generator. Output crisp, user-facing highlights." },
              { "role": "user",   "content": $content }
            ]
          }' > body.json
      
          set -o pipefail
          CURL=( -sS -L --fail-with-body -X POST
            -H "Accept: application/vnd.github+json"
            -H "X-GitHub-Api-Version: 2022-11-28"
            -H "Content-Type: application/json"
            -H "Authorization: Bearer $GITHUB_TOKEN" )
      
          if ! curl "${CURL[@]}" https://models.github.ai/inference/chat/completions \
               --data @body.json | jq -e -r '.choices[0].message.content' > SUMMARY.md; then
            jq '.model="openai/gpt-4.1"' body.json > body_fallback.json
            curl "${CURL[@]}" https://models.github.ai/inference/chat/completions \
               --data @body_fallback.json | jq -e -r '.choices[0].message.content' > SUMMARY.md
          fi
      
          test -s SUMMARY.md

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name:  ${{ github.ref_name }}
          name:      ${{ github.ref_name }}
          body_path: SUMMARY.md
          files: |
            CHANGELOG.md